name: Terraform Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose Terraform action (apply or destroy)'
        required: true
        default: 'apply'

jobs:
  terraform:
    name: Terraform Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.LEO_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.LEO_SECRET_KEY }}
          aws-region: us-east-1

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      - name: Validate Terraform
        run: terraform validate
        working-directory: terraform

      - name: Write build_spec.yaml for Amplify
        run: |
          mkdir -p terraform
          cat <<'EOT' > terraform/build_spec.yaml
          version: 1
          applications:
            - appRoot: fisc-ai/frontend
              frontend:
                phases:
                  preBuild:
                    commands:
                      - npm install
                  build:
                    commands:
                      - npm run build
                artifacts:
                  baseDirectory: build
                  files:
                    - "**/*"
                cache:
                  paths:
                    - node_modules/**/*
            - appRoot: fisc-ai/backend/python
              backend:
                phases:
                  preBuild:
                    commands:
                      - pip install -r requirements.txt
                  build:
                    commands:
                      - python server.py
                artifacts:
                  baseDirectory: .
                  files:
                    - "**/*"
                cache:
                  paths:
                    - .venv/**/*
          EOT

      - name: Plan Terraform
        run: terraform plan -out=tfplan
        working-directory: terraform
        env:
          TF_VAR_github_token: ${{ secrets.TOKEN_GIT }}

      - name: Apply Terraform
        if: github.event.inputs.action == 'apply' || github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        working-directory: terraform
        env:
          TF_VAR_github_token: ${{ secrets.TOKEN_GIT }}
      
      - name: Get and Write Clean API URL
        id: get_api_url
        working-directory: terraform
        shell: bash
        run: |
            echo "Fetching clean API URL from Terraform output..."
        
            raw_output=$(terraform output -raw api_gateway_url 2>/dev/null)
        
            # Strip any extra lines or garbage (for safety)
            api_url=$(echo "$raw_output" | sed 's/::.*//' | grep -oE '^https://[^[:space:]]+')
        
            echo "Cleaned API URL: $api_url"
        
            # For GitHub ENV
            safe_url="${api_url//'%'/'%25'}"
            safe_url="${safe_url//$'\n'/'%0A'}"
            safe_url="${safe_url//$'\r'/'%0D'}"
            echo "REACT_APP_API_URL=$safe_url" >> $GITHUB_ENV
        
            # For React frontend .env.production
            echo "REACT_APP_API_URL=$api_url" > ../fisc-ai/frontend/.env.production
            
      - name: Debug .env.production
        working-directory: fisc-ai/frontend
        run: cat .env.production
  

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
        working-directory: terraform
        env:
          TF_VAR_github_token: ${{ secrets.TOKEN_GIT }}
